
@using CurrieTechnologies.Razor.SweetAlert2
@using ModHub.Shared.Entities

@inject NavigationManager navigationManager
@inject SweetAlertService swal
@inject HttpClient Http


<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <div class="mb-3">
            
            <label>Juego</label>
            <div>
                <InputSelect width="10" @bind-Value="@GameCategory.GameId" class="form-select">
                    <option value="">Seleccione el juego</option>
                    @foreach (var game in games)
                    {
                        <option value="@game.Id">@game.FullName</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => GameCategory.GameId)" />
            </div>

            <label>Categoria</label>
            <div>
                <InputSelect width="10" @bind-Value="@GameCategory.CategoryId" class="form-select">
                    <option value="">Seleccione el juego</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => GameCategory.CategoryId)" />
            </div>

            <button class="btn btn-primary" type="submit">Guardar</button>
            <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
        </div>
    </div>
</EditForm>

@code {
    private EditContext editContext = null!;
    private List<Game> games = new();
    private List<Category> categories = new();


    protected override async Task OnInitializedAsync()
    {
        games = await Http.GetFromJsonAsync<List<Game>>("/api/games");
        categories = await Http.GetFromJsonAsync<List<Category>>("/api/categories");

    }


    protected override void OnInitialized()
    {
        editContext = new(GameCategory);
    }

    [EditorRequired]
    [Parameter]
    public GameCategory GameCategory { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Quieres salir?",
                Text = "Tienes cambios sin guardar.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí",
                CancelButtonText = "No",
                ReverseButtons = true
            });

        var confirmation = !string.IsNullOrEmpty(result.Value);
        if (confirmation)
        {
            return;
        }
        context.PreventNavigation();
    }
}