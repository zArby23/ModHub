﻿@using ModHub.Shared.Entities
﻿@using ModHub.Shared.Enums

@inject NavigationManager Navigation
@inject SweetAlertService swal

@inject HttpClient Http

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator/>
    <div class="mb-3">
        <div class="mb-3">
            <label>Nombre</label>
            <div>
                <InputText width="10" @bind-Value="@Mod.Name" />
                <ValidationMessage For="@(() => Mod.Name)" />
            </div>
            <label>Genero</label>
            <div>
                <InputText width="10" @bind-Value="@Mod.Genre" />
                <ValidationMessage For="@(() => Mod.Genre)" />
            </div>
            <label>Descripcion</label>
            <div>
                <InputText width="10" @bind-Value="@Mod.Description" />
                <ValidationMessage For="@(() => Mod.Description)" />
            </div>
            <label>Version</label>
            <div>
                <InputNumber width="10" @bind-Value="@Mod.Version" />
                <ValidationMessage For="@(() => Mod.Version)" />
            </div>
            <label>Juego</label>
            <div>
                <InputSelect width="10" @bind-Value="@Mod.GameId" class="form-select">
                    <option value="">Seleccione el juego</option>
                    @foreach (var game in games)
                    {
                        <option value="@game.Id">@game.FullName</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Mod.Game)" />
            </div>
            <label>Creador</label>
            <div>
                <InputSelect width="10" @bind-Value="@Mod.CreatorId" class="form-select">
                    <option value="">Seleccione el creador</option>
                    @foreach (var creator in creators)
                    {
                        <option value="@creator.Id">@creator.FullName</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Mod.Creator)" />
            </div>
            <label>Estatus</label>
            <div>
                <InputSelect @bind-Value="@Mod.ModStatus">
                    <option value="">Seleccione el estado</option>
                    @foreach (ModStatus status in Enum.GetValues(typeof(ModStatus)))
                    {
                        <option value="@status">@status</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Mod.ModStatus)" />
            </div>
            <button class="btn btn-primary" type="submit">Guardar</button>
            <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
        </div>
    </div>
</EditForm>


@code 
{

    private List<Game> games = new();
    private List<Creator> creators = new();
    private EditContext editContext = null!;

    protected override async Task OnInitializedAsync()
    {

        games = await Http.GetFromJsonAsync<List<Game>>("/api/games");
        creators = await Http.GetFromJsonAsync<List<Creator>>("/api/creators");
    }

    protected override void OnInitialized()
    {
        editContext = new(Mod);
    }

    [EditorRequired]
    [Parameter]
    public Mod Mod { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }

}