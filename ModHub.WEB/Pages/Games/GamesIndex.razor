@page "/games"

@using CurrieTechnologies.Razor.SweetAlert2
@using ModHub.Shared.Entities
@using ModHub.WEB.Repositories
@using ModHub.WEB.Shared

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h1>Juegos</h1>

@if (Games is null)
{
    <div class="spinner"/>
    <a class="btn btn-outline-primary float-end" href="/creators/create"><i class="bi bi-person-fill-add"></i> Añadir Creador</a>
}
else
{
    <p>test</p>
}

@code {
    public List<Game> Games { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHttp = await repository.GetAsync<List<Game>>("api/games");
        Games = responseHttp.Response!;
    }

    private async Task Delete(Game game)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
        {
            Title = "¿Estas seguro?",
            Text = "No podras revertir este cambio.",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Si, eliminar",
            CancelButtonText = "Cancelar"
        });

        var confirmation = string.IsNullOrEmpty(result.Value);

        if (confirmation)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync($"api/games/{game.Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var errorMessage = await responseHttp.GetErrorMessage();
                await swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}
