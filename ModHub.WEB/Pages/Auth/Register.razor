
@page "/Register"
@using ModHub.Shared.DTOs;
@using ModHub.Shared.Enums;
@using ModHub.WEB.Auth;
@using ModHub.WEB.Shared;
@inject IRepository repository;
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<h3>Registrar Nuevo Usuario</h3>

<EditForm Model="userDTO" OnValidSubmit="CreateUserAsync">
    <DataAnnotationsValidator/>

    <div class="row">
        <div class="col-6">
            <div class="mb-3">
                <label>Nombres:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.FirstName" />
                    <ValidationMessage For="@(() => userDTO.FirstName)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Apellidos:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.LastName" />
                    <ValidationMessage For="@(() => userDTO.LastName)" />
                </div>
            </div>

            <div class="mb-3">
                <label>Documento:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Document" />
                    <ValidationMessage For="@(() => userDTO.Document)" />
                </div>
            </div>
            
            <div class="mb-3">
                <label>Dirección:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Address" />
                    <ValidationMessage For="@(() => userDTO.Address)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Email:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Email" />
                    <ValidationMessage For="@(() => userDTO.Email)" />
                </div>
            </div>
        </div>
        <div class="col-6">
           
            <div class="mb-3">
                
                    <div class="mb-3">
                        <InputImg Label="Foto" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                    </div>

            </div>
            <div class="mb-3">
                <label>Contraseña:</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userDTO.Password" />
                    <ValidationMessage For="@(() => userDTO.Password)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Confirmación de contraseña:</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userDTO.PasswordConfirm" />
                    <ValidationMessage For="@(() => userDTO.PasswordConfirm)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Tipo de usuario:</label>
                <div>
                    <InputSelect class="form-control" @bind-Value="userDTO.UserType">
                        <option value="@UserType.User">Usuario</option>
                        <option value="@UserType.Admin">Admin</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => userDTO.UserType)" />
                </div>
            </div>
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Registrar</button>

</EditForm>

@code {

    private UserDTO userDTO = new();
    private string? imageUrl;

    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsAdmin { get; set; }


    private async Task CreateUserAsync()
    {
        userDTO.UserName = userDTO.Email;
        userDTO.UserType = IsAdmin ? UserType.Admin : UserType.User; var responseHttp = await repository.PostAsync<UserDTO, TokenDTO>("/api/accounts/CreateUser", userDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");

        if (!string.IsNullOrEmpty(userDTO.Photo))
        {
            imageUrl = userDTO.Photo;
            userDTO.Photo = null;
        }
    }

    private void ImageSelected(string imagenBase64)
    {
        userDTO.Photo = imagenBase64;
        imageUrl = null;
    }

}
